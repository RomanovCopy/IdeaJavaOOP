package com.romanovcopy.interfaces;

import com.romanovcopy.base.Person;
import com.romanovcopy.models.Extension;

/**
 * Удовлетворяет нескольким принципам SOLID:
 * Принцип единственной ответственности (SRP):
 *         Имеет только одну ответственность - управление контактами.
 *         Каждый метод отвечает только за одну конкретную операцию.
 * Принцип открытости/закрытости (OCP):
 *         Определен с использованием абстракции T extends Person,
 *         что позволяет его реализациям работать с любым типом контакта, который является подтипом Person.
 *         Это позволяет расширять функциональность ContactController, добавляя новые типы контактов,
 *         без изменения самого интерфейса.
 * Принцип подстановки Барбары Лисков (LSP):
 *         Не содержит нарушений принципа LSP. Все методы явно определены и не предполагают изменения
 *         контракта в подклассах.
 * Принцип разделения интерфейса (ISP):
 *         Определяет только методы, связанные с управлением контактами. Не содержит
 *         методов, которые не используются в контексте контроллера контактов.
 *         Таким образом, интерфейс соответствует принципу ISP.
 * Принцип инверсии зависимостей (DIP):
 *        Не является примером принципа DIP, так как он определяет
 *        зависимости от конкретных типов (Extension, Person) и от него не унаследованы
 *        другие абстракции.
 */

public interface ContactController<T extends Person> {

    void getExtension();
    void setExtension(Extension extension);
    void addContact(T contact);
    void removeContact(T contact);
    void getAllContacts();
    void saveContacts(String fileName);
    void loadContacts(String fileName);
}
